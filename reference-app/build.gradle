buildscript {
    repositories {
        mavenCentral()
        google()
        maven {
            url "https://s3.amazonaws.com/repo.commonsware.com"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.3'
        classpath 'com.google.gms:google-services:4.3.9'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'
        classpath 'org.smartregister:gradle-jarjar-plugin:1.0.0-SNAPSHOT'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'org.smartregister.gradle.jarjar'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

jacoco {
    toolVersion = jacocoVersion
}
// This variables are used by the version code & name generators
ext.versionMajor = 1
ext.versionMinor = 6
ext.versionPatch = 16
ext.versionClassifier = null
ext.isSnapshot = false
ext.minimumSdkVersion = androidMinSdkVersion

android {
    /*
    * This allows you to run the app in the release variant.  make sure to add this configs to the
    * local.properties files when you need to use them
    * */
    if (project.rootProject.file("local.properties").exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        if (properties != null && properties.containsKey("store.file") && properties.containsKey("store.password") && properties.containsKey("key.password")) {
            signingConfigs {
                release {
                    storeFile file(properties['store.file'])
                    storePassword properties['store.password']
                    keyAlias = 'release'
                    keyPassword properties['key.password']
                }
                debug {
                    storeFile file(properties['store.file'])
                    storePassword properties['store.password']
                    keyAlias = 'release'
                    keyPassword properties['key.password']
                }
            }
        }
    }

    useLibrary 'org.apache.http.legacy'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "org.smartregister.anc"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "IS_SYNC_SETTINGS", "true"
        buildConfigField "long", "EVENT_VERSION", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "RESOLVE_SETTINGS", "true"
        buildConfigField "boolean", "HAS_EXTRA_SETTINGS_SYNC_FILTER", "true"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled true

        if (properties != null && properties.containsKey("store.file") && properties.containsKey("store.password") && properties.containsKey("key.password")) {
            signingConfig signingConfigs.release
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
                arguments = [eventBusIndex: 'org.smartregister.anc.ANCEventBusIndex']
            }
        }

        if (project.rootProject.file("local.properties").exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            if (properties != null && properties.containsKey("flurry.api.key")) {
                buildConfigField "String", "FLURRY_API_KEY", properties["flurry.api.key"]
            } else {
                println("Flurry Analytics API key config variables is not set in your local.properties")
                buildConfigField "String", "FLURRY_API_KEY", "\"sample_key\""
            }

            if (properties != null && properties.containsKey("oauth.client.id")) {
                buildConfigField "String", "OAUTH_CLIENT_ID", properties["oauth.client.id"]

            } else {
                project.logger.error("oauth.client.id variable is not set in your local.properties")
                buildConfigField "String", "OAUTH_CLIENT_ID", "\"sample_client_id\""
            }


            if (properties != null && properties.containsKey("oauth.client.secret")) {
                buildConfigField "String", "OAUTH_CLIENT_SECRET", properties["oauth.client.secret"]

            } else {
                project.logger.error("oauth.client.secret variable is not set in your local.properties")
                buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample_client_secret\""
            }
        } else {
            println("local.properties does not exist")
            buildConfigField "String", "FLURRY_API_KEY", "\"sample_key\""
            buildConfigField "String", "OAUTH_CLIENT_ID", "\"sample_client_id\""
            buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample_client_secret\""
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rule.pro'
            resValue "string", 'opensrp_url', '"https://anc.labs.smartregister.org/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "DATABASE_VERSION", '3'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "false"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
        }

        debug {
            resValue "string", 'opensrp_url', '"https://anc.labs.smartregister.org/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "DATABASE_VERSION", '3'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "false"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '15'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '15'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '15'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
        exclude 'LICENSE.txt'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    flavorDimensions 'baseDimension'

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
}

/**
 * Generates the version code following the naming method describe here
 * https://medium.com/@maxirosson/versioning-android-apps-d6ec171cfd82
 * @return version code
 */
private Integer generateVersionCode() {
    //return ext.minimumSdkVersion * 10000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch This bit will be activated after we are sure of the clients minimum sdk version.
    return ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

/**
 * Generates the version name following the naming method describe here
 * https://medium.com/@maxirosson/versioning-android-apps-d6ec171cfd82
 * @return version name
 */
private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
    if (ext.versionClassifier == null && ext.isSnapshot) {
        ext.versionClassifier = "SNAPSHOT"
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifier
    }
    return versionName;
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    def powerMockVersion = '2.0.7'
    implementation project(":opensrp-anc")
    implementation('org.smartregister:opensrp-client-native-form:3.1.2-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'org.yaml', module: 'snakeyaml'
        exclude group: 'io.ona.rdt-capture', module: 'lib'
    }

    implementation('org.smartregister:opensrp-client-core:6.0.0-BETA3-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'net.zetetic', module: 'android-database-sqlcipher'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
        exclude group: 'com.ibm.fhir', module: 'fhir-model'
        exclude group: 'org.smartregister', module: 'android-p2p-sync'
    }

    api("org.smartregister:android-p2p-sync:0.4.0-DEV-SNAPSHOT") {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
        exclude group: 'org.smartregister', module: 'opensrp-client-configurable-views'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
    }

    jarJar 'com.ibm.fhir:fhir-model:4.8.3'
    implementation fileTree(dir: "./build/libs", include: ['*.jar'])
    implementation('org.smartregister:opensrp-client-configurable-views:1.1.5-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
    annotationProcessor 'com.jakewharton:butterknife:10.2.3'
    implementation 'net.zetetic:android-database-sqlcipher:4.4.0@aar'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.greenrobot:eventbus:3.2.0'
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.2.0'
    implementation 'com.google.guava:guava:30.0-jre'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.20'
    implementation 'com.evernote:android-job:1.4.2'
    implementation 'com.github.lecho:hellocharts-library:1.5.8@aar'
    implementation 'id.zelory:compressor:2.1.1'
    implementation('com.google.android.material:material:1.4.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
    }
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.31'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'org.jeasy:easy-rules-core:4.1.0'
    implementation 'org.jeasy:easy-rules-mvel:4.1.0'
    implementation 'com.flurry.android:analytics:11.6.0@aar'
    implementation 'com.flurry.android:analytics:11.6.0@aar'
    implementation 'androidx.multidex:multidex:2.0.1'
// Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:28.3.1')

// Declare the dependencies for the Crashlytics and Analytics libraries
// When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation('com.google.firebase:firebase-analytics') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation 'com.google.firebase:firebase-perf'
    implementation 'com.android.volley:volley:1.2.1'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation('com.squareup:fest-android:1.0.8') {
        exclude module: 'support-v4'
    }
// https://mvnrepository.com/artifact/org.hamcrest/hamcrest
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'org.robolectric:shadows-multidex:4.4'
    testImplementation 'com.ibm.fhir:fhir-model:4.8.3'
//testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    testImplementation 'org.mockito:mockito-core:3.5.15'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    getSourceDirectories().setFrom([mainSrc])
    getClassDirectories().setFrom([debugTree])
    getExecutionData().setFrom(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}


jarJar {
    // Dependencies and related JarJar rules
    remove = ['fhir-model-4.8.3.jar': 'com.ibm.fhir.model.visitor.CopyingVisitor*']
}